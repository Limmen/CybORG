import inspect

import pytest

from CybORG.CybORG import CybORG
from CybORG.CybORG import DebuggingAgent
from CybORG.CybORG import TrinaryEnum, OperatingSystemType
from CybORG.CybORG import ExploitAction
from CybORG.CybORG import BlueKeep
from CybORG.CybORG import EternalBlue
from CybORG.CybORG import HTTPRFI
from CybORG.CybORG import HTTPSRFI
from CybORG.CybORG import SSHBruteForce
from CybORG.CybORG import Win2008EphemeralPort, LinuxEphemeralPort

HOSTNAMES = ['User1', 'User2', 'User3', 'User4','Enterprise0','Enterprise1','Enterprise2',
            'Op_Server0','Op_Host0','Op_Host1','Op_Host2']

@pytest.fixture
def cyborg(agents = {},seed = 1):
    path = str(inspect.getfile(CybORG))
    path = path[:-10] + '/Shared/Scenarios/Scenario2.yaml'
    cyborg = CybORG(path, 'sim', agents=agents)
    cyborg.set_seed(seed)
    return cyborg

@pytest.fixture
def params():
    return {'session':0,'agent':'Red', 'target_session':0}

@pytest.fixture
def obs_failure():
    return {'success': TrinaryEnum.FALSE}

def _compute_red_killchain(cyborg,hostnames,priority=None):
    results = cyborg.reset(agent='Red')
    obs = results.observation
    
    ip_map = cyborg.get_ip_map()
    ip_list = [ip_map[h] for h in hostnames]
    agent = DebuggingAgent(ip_list=ip_list,priority=priority)

    history = []
    for i in range(39):
        try:
            action = agent.get_action(obs)
        except:
            break
        results = cyborg.step(agent='Red',action=action)

        name = results.action.__class__.__name__
        host = None
        if 'Exploit' in name:
            name = results.action.sub_action.__class__.__name__
            ip_map = cyborg.get_ip_map()
            host_index = list(ip_map.values()).index(results.action.ip_address)
            host = list(ip_map.keys())[host_index]
        obs = results.observation
        history.append((name,obs,host))
    
    return {'history':history,'cyborg':cyborg}

@pytest.fixture
def red_killchain(cyborg):
    return _compute_red_killchain(cyborg,HOSTNAMES)

@pytest.fixture
def prioritised_killchain():
    return _compute_red_killchain

